set nocompatible              " be iMproved, required
filetype off                  " required

call plug#begin('~/.vim/plugged')

" The following are examples of different formats supported.
" Keep Plug commands between vundle#begin/end.
" plugin on GitHub repo

Plug 'tpope/vim-fugitive'

" plugin from http://vim-scripts.org/vim/scripts.html
" Plug 'L9'
" Git plugin not hosted on GitHub
"
" Plug 'git://git.wincent.com/command-t.git'

" git repos on your local machine (i.e. when working on your own plugin)
"Plug 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plug 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plug 'ascenator/L9', {'name': 'newL9'}

Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'xolox/vim-easytags'
Plug 'xolox/vim-misc'
Plug 'airblade/vim-gitgutter'
Plug 'nvie/vim-flake8'
"" Plug 'pythoncomplete'
"" Plug 'valloric/youcompleteme'
"" Plug 'rdnetto/ycm-generator'
Plug 'suan/vim-instant-markdown', {'rtp': 'after'}
Plug 'kkoomen/vim-doge'
Plug 'dense-analysis/ale'
Plug 'fisadev/fixedtasklist.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'rigellute/rigel'
Plug 'rakr/vim-one'
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'chase/vim-ansible-yaml'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'idanarye/vim-merginal'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'fisadev/vim-isort'
"" Plug 'python/black'
Plug 'xolox/vim-session'
Plug 'luochen1990/rainbow'
Plug 'scrooloose/nerdcommenter'
Plug 'iberianpig/tig-explorer.vim'
"" Plug 'ryanoasis/nerd-fonts'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'rhysd/devdocs.vim'
Plug 'tpope/vim-rhubarb'
Plug 'asins/renamer.vim'
Plug 'inkarkat/vim-ingo-library'
Plug 'inkarkat/vim-spellcheck'
Plug 'integralist/vim-mypy'
Plug 'jmcantrell/vim-virtualenv'
"" Plug 'neoclide/coc.nvim', {'branch': 'master'}
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
Plug 'Shougo/deoplete.nvim'
Plug 'davidhalter/jedi-vim'
Plug 'zchee/deoplete-jedi'
"" The next two plugins are for deoplete to work
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

Plug 'jremmen/vim-ripgrep'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'chengzeyi/fzf-preview.vim'

Plug 'whiteinge/diffconflicts'

Plug 'lpinilla/vim-codepainter'

Plug 'mileszs/ack.vim'

" Extend fugitive.vim to support Bitbucket URLs in :Gbrowse.
Plug 'tommcdo/vim-fubitive'


" All of your Plugs must be added before the following line
" To ignore plugin indent changes, instead use:
call plug#end()

"
" Brief help
" :PlugList       - lists configured plugins
" :PlugInstall    - installs plugins; append `!` to update or just :PlugUpdate
" :PlugSearch foo - searches for foo; append `!` to refresh local cache
" :PlugClean      - confirms removal of unused plugins; append `!` to auto-approve removal

let g:deoplete#enable_at_startup = 1

" Jedi is used only for jumping to definition, not for completion.
let g:jedi#completions_enabled = 0


let g:NERDTreeNodeDelimiter = "\u00a0"

syntax on

set shell=/bin/bash
set ruler
set tabstop=4 shiftwidth=4 expandtab
set backspace=indent,eol,start
set tags=./tags
set hlsearch
set nofoldenable    "" disable folding
set number


map <F4> :TagbarToggle<CR>
map <F3> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']
map <F2> :TaskList<CR>

"" autocmd FileType python map <buffer> <F8> :call flake8#Flake8()<CR>


let g:doge_doc_standard_python = 'google'
" Write google docstring. Must be on the def/class line
let g:doge_mapping = "<Leader>X"
let g:indent_guides_enable_on_vim_startup = 1


"""" enable 24bit true color
set termguicolors

"""" enable the theme
syntax enable
let g:airline#extensions#ale#enabled = 1
" disable mode
let g:airline_section_a = ''
" disable file type
let g:airline_section_x = ''
" disable file encoding
let g:airline_section_y = ''
" show only line and column
let g:airline_section_z = '%l:%c'

" update tagbar faster
set updatetime=500


nmap <silent> <leader>aj :ALENext<cr>
nmap <silent> <leader>ak :ALEPrevious<cr>

let g:ansible_options = {'documentation_mapping': '<C-K>'}

let g:loaded_matchparen=1
let g:rainbow_active = 1

let g:session_autoload = 'no'
let g:session_autosave = 'no'

"" Gdiff vertical
set diffopt+=vertical


"" open tig with current file
nnoremap <Leader>T :TigOpenCurrentFile<CR>

"" open tig with Project root path
nnoremap <Leader>t :TigOpenProjectRootDir<CR>

"" open tig grep
nnoremap <Leader>g :TigGrep<CR>

"" resume from last grep
nnoremap <Leader>r :TigGrepResume<CR>

"" open tig grep with the selected word
vnoremap <Leader>g y:TigGrep<Space><C-R>"<CR>

"" open tig grep with the word under the cursor
nnoremap <Leader>cg :<C-u>:TigGrep<Space><C-R><C-W><CR>

"" open tig blame with current file
nnoremap <Leader>b :TigBlame<CR>

set encoding=UTF-8
"" set guifont=DroidSansMono\ Nerd\ Font\ 10
"" set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ 10

let g:airline_powerline_fonts = 1
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
" loading the plugin
let g:webdevicons_enable = 1



"let g:NERDTreeIndicatorMapCustom = {
    "\ "Modified"  : "✹",
    "\ "Staged"    : "✚",
    "\ "Untracked" : "✭",
    "\ "Renamed"   : "➜",
    "\ "Unmerged"  : "═",
    "\ "Deleted"   : "✖",
    "\ "Dirty"     : "✗",
    "\ "Clean"     : "✔︎",
    "\ 'Ignored'   : '☒',
    "\ "Unknown"   : "?"
    "\ }

"" https://github.com/tiagofumo/vim-nerdtree-syntax-highlight
let s:blue = "689FB6"
let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExtensionHighlightColor['py'] = s:blue " sets the color of css files to blue

"" devdocs.io
nmap K <Plug>(devdocs-under-cursor-all)

""let g:instant_markdown_open_to_the_world = 1
""let g:instant_markdown_autoscroll = 0

"" Cut/Copy/Paste
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <C-r><C-o>+


" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'



" ################################################# "
" COC.VIM"

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

"function! s:check_back_space() abort
"  let col = col('.') - 1
"  return !col || getline('.')[col - 1]  =~# '\s'
"endfunction

"" Use <c-space> to trigger completion.
"inoremap <silent><expr> <c-space> coc#refresh()

"" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
"" position. Coc only does snippet and additional edit on confirm.
"""if has('patch8.1.1068')
"  " Use `complete_info` if your (Neo)Vim version supports it.
"""  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
"""else
"""  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"""endif

"" Use `[g` and `]g` to navigate diagnostics
"nmap <silent> [g <Plug>(coc-diagnostic-prev)
"nmap <silent> ]g <Plug>(coc-diagnostic-next)

"" GoTo code navigation.
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)

"" Use K to show documentation in preview window.
"nnoremap <silent> K :call <SID>show_documentation()<CR>

"function! s:show_documentation()
"  if (index(['vim','help'], &filetype) >= 0)
"    execute 'h '.expand('<cword>')
"  else
"    call CocAction('doHover')
"  endif
"endfunction

"" Highlight the symbol and its references when holding the cursor.
"autocmd CursorHold * silent call CocActionAsync('highlight')

"" Symbol renaming.
"nmap <leader>rn <Plug>(coc-rename)

"" Formatting selected code.
"xmap <leader>f  <Plug>(coc-format-selected)
"nmap <leader>f  <Plug>(coc-format-selected)

"augroup mygroup
"  autocmd!
"  " Setup formatexpr specified filetype(s).
"  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"  " Update signature help on jump placeholder.
"  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
"augroup end

"" Applying codeAction to the selected region.
"" Example: `<leader>aap` for current paragraph
"xmap <leader>a  <Plug>(coc-codeaction-selected)
"nmap <leader>a  <Plug>(coc-codeaction-selected)

"" Remap keys for applying codeAction to the current line.
"nmap <leader>ac  <Plug>(coc-codeaction)
"" Apply AutoFix to problem on the current line.
"nmap <leader>qf  <Plug>(coc-fix-current)

"" Introduce function text object
"" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
"xmap if <Plug>(coc-funcobj-i)
"xmap af <Plug>(coc-funcobj-a)
"omap if <Plug>(coc-funcobj-i)
"omap af <Plug>(coc-funcobj-a)

"" Use <TAB> for selections ranges.
"" NOTE: Requires 'textDocument/selectionRange' support from the language server.
"" coc-tsserver, coc-python are the examples of servers that support it.
"nmap <silent> <TAB> <Plug>(coc-range-select)
"xmap <silent> <TAB> <Plug>(coc-range-select)

"" Add `:Format` command to format current buffer.
"command! -nargs=0 Format :call CocAction('format')

"" Add `:Fold` command to fold current buffer.
"command! -nargs=? Fold :call     CocAction('fold', <f-args>)

"" Add `:OR` command for organize imports of the current buffer.
"command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

"" Add (Neo)Vim's native statusline support.
"" NOTE: Please see `:h coc-status` for integrations with external plugins that
"" provide custom statusline: lightline.vim, vim-airline.
"set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

"" Mappings using CoCList:
"" Show all diagnostics.
"nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
"" Manage extensions.
"nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
"" Show commands.
"nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
"" Find symbol of current document.
"nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
"" Search workspace symbols.
"nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
"" Do default action for next item.
"nnoremap <silent> <space>j  :<C-u>CocNext<CR>
"" Do default action for previous item.
"nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
"" Resume latest coc list.
"nnoremap <silent> <space>p  :<C-u>CocListResume<CR>


" colorscheme rigel

" let g:rigel_airline = 1
" let g:airline_theme = 'rigel'
" set background=dark

"let g:airline_theme='one'
"set background=light        " for the light version
"let g:one_allow_italics = 1 " I love italic for comments
"colorscheme one


" push cwindow to the bottom, instead of opening in tagbar
autocmd FileType qf wincmd J

set pyxversion=3

" ALE Python fixers
let g:ale_fixers = {'python': ['isort', 'black', 'remove_trailing_lines', 'trim_whitespace']}
" Set this variable to 1 to fix files when you save them.
"" let g:ale_fix_on_save = 1

" bitbucket GBrowse url
" let g:fubitive_domain_pattern = 'code\.example\.com'

command! -nargs=0 FT enew <bar> FZFTags

